{
	"@metadata": {
		"author": "jackcampbell",
		"lastupdated": "2021-09-22 09:46:46.336872",
		"locale": "en",
		"messagedocumentation" : "qqq_watchx"
	},
	"ARD_TYPE_CHAR": "character",
	"ARD_TYPE_TEXT": "text",
	"ARD_TYPE_BOOL": "boolean",
	"ARD_TYPE_SHORT": "short number",
	"ARD_TYPE_NUMBER": "number",
	"ARD_TYPE_LONG": "large number",
	"ARD_TYPE_DECIMAL": "decimal",
	"ARD_TYPE_ARRAY": "Array",
	"ARD_TYPE_NULL": "Null",
	"ARD_TYPE_UNDEF": "Undefined",
	"ARD_TYPE_CHILDBLOCKMISSING": "ChildBlockMissing",
	"ARD_HIGH": "HIGH",
	"ARD_LOW": "LOW",
	"ARD_ANALOGREAD": "read analog pin #",
	"ARD_ANALOGREAD_TIP": "Return a value between 0 and 1024",
	"ARD_ANALOGWRITE": "set analog pin #",
	"ARD_ANALOGWRITE_TIP": "Write analog value between 0 and 255 to a specific PWM Port",
	"ARD_HIGHLOW_TIP": "Set a pin state logic High or Low.",
	"ARD_DIGITALREAD": "read digital pin #",
	"ARD_DIGITALREAD_TIP": "Read digital value on a pin: HIGH or LOW",
	"ARD_DIGITALWRITE": "set digitial pin #",
	"ARD_WRITE_TO": "to",
	"ARD_DIGITALWRITE_TIP": "Write digital value HIGH or LOW to a specific Port",
	"ARD_BUILTIN_LED": "set built-in LED",
	"ARD_BUILTIN_LED_TIP": "Light on or off for the built-in LED of the watchX",
	"ARD_DEFINE": "Define",
	"ARD_TONE_PIN": "Tone pin #",
	"ARD_TONE_FREQ": "frequency",
	"ARD_TONE_PIN_TIP": "Generate audio tones on a pin",
	"ARD_NOTONE_PIN": "No tone pin #",
	"ARD_NOTONE_PIN_TIP": "Stop generating a tone on a pin",
	"ARD_MAP": "map",
	"ARD_MAP_VAL": "value to [0-",
	"ARD_MAP_TIP": "Re-maps a number from [0-1024] to another.",
	"ARD_FUN_RUN_SETUP": "watchX run first:",
	"ARD_FUN_RUN_LOOP": "watchX loop forever:",
	"ARD_FUN_RUN_TIP": "Defines the Arduino setup() and loop() functions.",
	"ARD_PIN_WARN1": "Pin %1 is needed for %2 as pin %3. Already used as %4.",
	"ARD_SERIAL_SETUP": "setup",
	"ARD_SERIAL_SPEED": ":  speed to",
	"ARD_SERIAL_BPS": "BPS",
	"ARD_SERIAL_SETUP_TIP": "Selects the speed for a specific Serial peripheral",
	"ARD_SERIAL_PRINT": "print",
	"ARD_SERIAL_PRINT_NEWLINE": "add new line",
	"ARD_SERIAL_PRINT_TIP": "Prints data to the console/serial port as human-readable ASCII text.",
	"ARD_SERIAL_PRINT_WARN": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_SERVO_WRITE": "set SERVO from pin #",
	"ARD_SERVO_WRITE_TO": "to",
	"ARD_SERVO_WRITE_DEG_180": "degrees (0~180)",
	"ARD_SERVO_WRITE_TIP": "Set a SERVO to a specified angle",
	"ARD_SERVO_READ": "read SERVO from pin #",
	"ARD_SERVO_READ_TIP": "Read a SERVO angle",
	"ARD_SPI_SETUP": "setup",
	"ARD_SPI_SETUP_CONF": "configuration:",
	"ARD_SPI_SETUP_SHIFT": "data shift",
	"ARD_SPI_SETUP_MSBFIRST": "MSBFIRST",
	"ARD_SPI_SETUP_LSBFIRST": "LSBFIRST",
	"ARD_SPI_SETUP_DIVIDE": "clock divide",
	"ARD_SPI_SETUP_MODE": "SPI mode (idle - edge)",
	"ARD_SPI_SETUP_MODE0": "0 (Low - Falling)",
	"ARD_SPI_SETUP_MODE1": "1 (Low - Rising)",
	"ARD_SPI_SETUP_MODE2": "2 (High - Falling)",
	"ARD_SPI_SETUP_MODE3": "3 (High - Rising)",
	"ARD_SPI_SETUP_TIP": "Configures the SPI peripheral.",
	"ARD_SPI_TRANS_NONE": "none",
	"ARD_SPI_TRANS_VAL": "transfer",
	"ARD_SPI_TRANS_SLAVE": "to slave pin #",
	"ARD_SPI_TRANS_TIP": "Send a SPI message to an specified slave device.",
	"ARD_SPI_TRANS_WARN1": "A setup block for %1 must be added to the workspace to use this block!",
	"ARD_SPI_TRANS_WARN2": "Old pin value %1 is no longer available.",
	"ARD_SPI_TRANSRETURN_TIP": "Send a SPI message to an specified slave device and get data back.",
	"ARD_STEPPER_SETUP": "setup stepper motor",
	"ARD_STEPPER_MOTOR": "stepper motor:",
	"ARD_STEPPER_DEFAULT_NAME": "MyStepper",
	"ARD_STEPPER_NUMBER_OF_PINS": "number of pins",
	"ARD_STEPPER_TWO_PINS": "2",
	"ARD_STEPPER_FOUR_PINS": "4",
	"ARD_STEPPER_PIN1": "pin1 #",
	"ARD_STEPPER_PIN2": "pin2 #",
	"ARD_STEPPER_PIN3": "pin3 #",
	"ARD_STEPPER_PIN4": "pin4 #",
	"ARD_STEPPER_REVOLVS": "how many steps per revolution",
	"ARD_STEPPER_SPEED": "set speed (RPM) to",
	"ARD_STEPPER_SETUP_TIP": "Configures a stepper motor pinout and other settings.",
	"ARD_STEPPER_STEP": "move stepper",
	"ARD_STEPPER_STEPS": "steps",
	"ARD_STEPPER_STEP_TIP": "Turns the stepper motor a specific number of steps.",
	"ARD_STEPPER_COMPONENT": "stepper",
	"ARD_COMPONENT_WARN1": "A %1 configuration block with the same %2 name must be added to use this block!",
	"ARD_TIME_DELAY": "wait",
	"ARD_TIME_MS": "milliseconds",
	"ARD_TIME_DELAY_TIP": "Wait specific time in milliseconds",
	"ARD_TIME_DELAY_MICROS": "microseconds",
	"ARD_TIME_DELAY_MICRO_TIP": "Wait specific time in microseconds",
	"ARD_TIME_MILLIS": "current elapsed time (milliseconds)",
	"ARD_TIME_MILLIS_TIP": "Returns the number of milliseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_MICROS": "current elapsed time (microseconds)",
	"ARD_TIME_MICROS_TIP": "Returns the number of microseconds since the Arduino board began running the current program. Has to be stored in a positive long integer",
	"ARD_TIME_INF": "wait forever (end program)",
	"ARD_TIME_INF_TIP": "Wait indefinitely, stopping the program.",
	"ARD_VAR_AS": "as",
	"ARD_VAR_AS_TIP": "Sets a value to a specific type",
	"ARD_PULSE_READ": "measure %1 pulse on pin #%2",
	"ARD_PULSE_READ_TIMEOUT": "measure %1 pulse on pin #%2 (timeout after %3 Î¼s)",
	"ARD_PULSE_TIP": "Measures the duration of a pulse on the selected pin.",
	"ARD_PULSETIMEOUT_TIP": "Measures the duration of a pulse on the selected pin, if it is within the time-out in microseconds.",
	"ARD_SETTONE": "Set tone on pin #",
	"ARD_TONEFREQ": "at frequency",
	"ARD_TONE_TIP": "Sets tone on pin to specified frequency within range 31 - 65535",
	"ARD_TONE_WARNING": "Frequency must be in range 31 - 65535",
	"ARD_NOTONE": "turn off tone on pin #",
	"ARD_NOTONE_TIP": "Turns the tone off on the selected pin",
	"NEW_INSTANCE": "New instance...",
	"RENAME_INSTANCE": "Rename instance...",
	"NEW_INSTANCE_TITLE": "New instance name:",
	"RENAME_INSTANCE_TITLE": "Rename all '%1' instances to:",
	"WX_TURN_LED": "turn LED",
	"WX_TO": "to",
	"WX_TURN_LED_TIPS": "Selected light on or off for the built-in LED of the watchX.",
	"WX_LED_BRIGHTNESS": "LED brightness",
	"WX_LED_BRIGHTNESS_TIP": "Selected light on or off with brightness control.",
	"WX_LED_LEVEL": " level ",
	"WX_OLED_WRITE": "display write",
	"WX_OLED_WRITE_LINE": "line",
	"WX_OLED_WRITE_ALIGN": "align",
	"WX_PX": "X",
	"WX_PY": "Y",
	"WX_OLED_WRITE_LINE_TIP": "Displays the data on the watchX Display, sets the line within range 1 - 8, aligns the text left, centered or right.  ",
	"WX_OLED_WRITE_POS_TIP": "Displays the data on the watchX Display, X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_DRAW_PIXEL": "draw pixel",
	"WX_DRAW_PIXEL_TIP": "Draws a single pixel at the given X - Y position. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_DRAW_LINE": "draw line",
	"WX_DRAW_LINE_TIP": "Draws a line. X1 and Y1 start point of the line, X2 and Y2 finis point of the line. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_DRAW_BATTERY_LEVEL": "draw battery level",
	"WX_DRAW_BATTERY_LEVEL_TIP": "Draws a battery icon at the given X - Y position with percent indicates battery fullness. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_PERCENT": "percent",
	"WX_OLED_BRIGHTNESS": "display brightness",
	"WX_OLED_BRIGHTNESS_TIP": "Sets the display brightness High or Low. High setting is for better visibility, Low setting is for low power consumption.",
	"WX_DRAW_USB_ICON": "draw USB icon",
	"WX_DRAW_USB_ICON_TIP": "Draw the USB icon at the given X - Y position. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_DRAW_CHARGE_ICON": "draw charge icon",
	"WX_DRAW_CHARGE_ICON_TIP": "Draw the charge icon at the given X - Y position. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_OLED_CLEAR_ALL": "display clear display",
	"WX_OLED_CLEAR_ALL_TIP": "Clears any data on the display.",
	"WX_OLED_POWER": "display power",
	"WX_OLED_POWER_TIP": "Turns the display on or off. High to turn on, Low to turn off.",
	"WX_SET_DATE": "set date",
	"WX_DAY": "day",
	"WX_MONTH": "month",
	"WX_YEAR": "year",
	"WX_HOUR": "hour",
	"WX_MINUTE": "minute",
	"WX_SECOND": "second",
	"WX_SET_DATE_TIP": "Sets the given date and time to the watchX time unit.",
	"WX_CURRENT_TIME": "current time & date",
	"WX_CURRENT_TIME_TIP": "Sets the computers date and time to the watchX time unit. ",
	"WX_GET": "get",
	"WX_GET_TIME_TIP": "Gets the current date/time unit from the watchX time unit.",
	"WX_LINE": "line",
	"WX_PRINT_TIME": "display time",
	"WX_PRINT_TIME_LINE_TIP": "Displays the hour, minute and second with a big font, sets the line within range 1 - 8.",
	"WX_PRINT_TIME_POS_TIP": "isplays the hour, minute and second with a big font at the given X - Y position. X lateral position within range 0 - 127, Y vertical position within range 0 - 63.",
	"WX_ALTITUDE": "altitude",
	"WX_PRESSURE": "pressure",
	"WX_TEMPERATURE": "temperature",
	"WX_GET_BMP": "get",
	"WX_GET_BMP_TIP": "Gets the selected altitude, pressure or temperature value from the built in BMP280 sensor. Altitude in meters, pressure in Pascal, temperature in celsius.",
	"WX_GET_MAG": "get MAG3110",
	"WX_GET_MAG_TIP": "Gets the magnetic field data from the built in MAG3110 sensor. Magnetic field in micro tesla(uT). This sensor replaced with MLX90393 sensor in watchX v1.3 and later.",
	"WX_GET_MLX": "get Magnetometer",
	"WX_GET_MLX_TIP": "Gets the magnetic field data from the built in MLX90393 sensor with filterin option for better sensebility. Magnetic field in micro tesla(uT).",
	"WX_FILTER": "filter",
	"WX_GET_MPU_ANGLE": "get IMU angle",
	"WX_GET_MPU_ANGLE_TIP": "Gets the angle between ground and watchX from the built in MPU6050 sensor. X is pitch angle and Y is roll angle.",
	"WX_GET_MPU_ACCEL": "get IMU acceleration",
	"WX_GET_MPU_ACCEL_TIP": "Gets the acceleration data from the built in MPU6050 sensor in meters per second square.",
	"WX_FREE_FALL_DETECTED": "detect free fall",
	"WX_FREE_FALL_DETECTED_TIP": "Detects free fall using the built in MPU6050 sensor. Adjusts the sensitivity using treshold and duration values.",
	"WX_THRESHOLD": "threshold",
	"WX_DURATION": "duration",
	"WX_DETECT_MOTION": "detect motion",
	"WX_DETECT_MOTION_TIP": "Detects motion using the built in MPU6050 sensor. Adjusts the sensitivity using treshold and duration values.",
	"WX_BZR_PLAY_NOTE": "play tone note",
	"WX_BZR_PLAY_NOTE_TIP": "Plays the selected note on the built in buzzer. Beat sets the duration of the note.",
	"WX_BEAT": "beat",
	"WX_PLAY_FREQ": "play frequency",
	"WX_PLAY_FREQ_TIP": "Sets tone on built in buzzer, frequency within range 31 - 65535",
	"WX_READ_BUTTON": "read button",
	"WX_READ_BUTTON_TIP": "Gets the status of the button weather it is pressed or not. Returns true if pressed.",
	"WX_READ_GPAD": "read G-Pad button",
	"WX_READ_GPAD_TIP": "Gets the status of the Game pad button weather it is pressed or not. Returns true if pressed.",
	"WX_GET_BATTERY_VOLTAGE": "get battery voltage (V)",
	"WX_GET_BATTERY_VOLTAGE_TIP": "Measures the battery voltage in Volts.",
	"WX_GET_BATTERY_PERCENT": "get battery voltage (%)",
	"WX_GET_BATTERY_PERCENT_TIP": "Measures the battery voltage and returns a value between 0 - 100.",
	"WX_CHARGE_COMPLETE": "detect charge complete",
	"WX_CHARGE_COMPLETE_TIP": "Checks the charge complete status of the watchX battery while charging. Returns true if the battery is fully charged.",
	"WX_CHECK_USB_CONNECTION": "check USB connection",
	"WX_CHECK_USB_CONNECTION_TIP": "Returns true if the watchX is connected to a USB source.",
	"WX_SLEEP_AND_WAKE_BUTTON": "sleep and wake on button",
	"WX_SLEEP_AND_WAKE_BUTTON_TIP": "Sleeps when the block executed, wakes up when stated button pressed.",
	"WX_SLEEP_AND_WAKE_TIMER": "sleep and wake on time",
	"WX_SLEEP_AND_WAKE_TIMER_TIP": "Sleeps and wakes on stated intervals.",
	"WX_INTERVALS": "intervals",
	"WX_BLUETOOTH": "Bluetooth",
	"WX_ID": "id",
	"WX_INIT": "init",
	"WX_BLUETOOTH_INIT_TIP": "Sets the bluetooth module in different mods. Id allows to give a unique Bluetooth device name.",
	"WX_BLUETOOTH_SEND": "Bluetooth send",
	"WX_BLUETOOTH_SEND_TIP": "Sends the given data over Bluetoth.",
	"WX_BLUETOOTH_RECV": "Bluetooth receive text",
	"WX_BLUETOOTH_RECV_TIP": "Receives data from the connected Bluetooth device.",
	"WX_BLE_KEY_PRESS": "Bluetooth key press",
	"WX_BLE_KEY_PRESS_TIP": "Acts as a Bluetooth keyboard, sends a keyboard key stroke.",
	"WX_BLE_MEDIA_CONTROL": "Bluetooth media control",
	"WX_BLE_MEDIA_CONTROL_TIP": "Allows media control when connected to a PC or phone.",
	"WX_PLAY_PAUSE": "play/pause",
	"WX_NEXT": "next",
	"WX_PREVIOUS": "previous",
	"WX_VOLUME_UP": "volume+",
	"WX_VOLUME_DOWN": "volume-",
	"WX_LEFT": "left",
	"WX_RIGHT": "right",
	"WX_PRESSED": "pressed",
	"WX_RELEASE": "release",
	"WX_BLE_MOUSE_CONTROL": "Bluetooth mouse button",
	"WX_BLE_MOUSE_CONTROL_TIP": "Allows to send Bluetooth mouse click.",
	"WX_BLUETOOTH_TRANSCEIVER": "transceiver",
	"WX_BLUETOOTH_KEYBOARD": "BTKeyboard",
	"WX_BLUETOOTH_HID_CONTROL": "HIDControl",
	"WX_BUZZER_HALF": "half",
	"WX_BUZZER_QUARTER": "quarter",
	"WX_BUZZER_EIGHTH": "eighth",
	"WX_BUZZER_WHOLE": "whole",
	"WX_BUZZER_DOUBLE": "double",
	"WX_BUZZER_ZERO": "zero",
	"WX_ALIGN_LEFT": "left",
	"WX_ALIGN_MIDDLE": "middle",
	"WX_ALIGN_RIGHT": "right",
	"WX_BUTTON_INPUT": "read button once",
	"WX_BUTTON_INPUT_TIP": "Gets the status of the button, single-shot pressed-on time duration. Delivers input value (state) after it has been stable.",
	"WX_GPAD_INPUT": "read G-Pad button once",
	"WX_GPAD_INPUT_TIP": "Gets the status of the button, single-shot pressed-on time duration. Delivers input value (state) after it has been stable.",
	"WX_BPM": "set BPM",
	"WX_BPM_TIP": "",
	"WX_BZR_STOP": "turn off tone",
	"WX_BZR_STOP_TIP": ""
}
